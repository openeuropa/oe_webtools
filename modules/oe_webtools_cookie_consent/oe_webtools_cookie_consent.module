<?php

/**
 * @file
 * OpenEuropa Webtools Cookie Consent module.
 */

declare(strict_types = 1);

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Url;
use Drupal\media\IFrameMarkup;

define('OE_WEBTOOLS_COOKIE_CONSENT_EMBED_COOKIE_URL', '//europa.eu/webtools/crs/iframe/?oriurl=');

/**
 * Implements hook_page_attachments().
 */
function oe_webtools_cookie_consent_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'oe_webtools_cookie_consent/oe_webtools_cookie_consent.cck';
}

/**
 * Implements template_preprocess_media_oembed_iframe().
 *
 * Because the oEmbed format comes with the actual HTML iframe,
 * we have to change its "src" attribute value
 * with the URL of the Cookie Consent service, passing the original URL to it.
 */
function oe_webtools_cookie_consent_preprocess_media_oembed_iframe(array &$variables): void {
  if ($variables['media'] instanceof IFrameMarkup) {
    preg_match('/<iframe.*src=["\']+([^"\']*)["\']+[^<>]*><\/iframe>/', $variables['media']->__toString(), $matches);
    if (!empty($matches[1])) {
      $new_iframe = str_replace($matches[1], '//ec.europa.eu/cookie-consent/iframe?oriurl=' . $matches[1] . '&lang=' . \Drupal::languageManager()->getCurrentLanguage()->getId(), $variables['media']);
      $variables['media'] = IFrameMarkup::create($new_iframe);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_webtools_cookie_consent_preprocess_video_embed_iframe(&$variables) {
  // Override the default url and pass it to the ec cck url but ignore iframes
  // that refer to the same site.
  if (!empty($variables['url']) && !UrlHelper::externalIsLocal($variables['url'], \Drupal::request()->getSchemeAndHttpHost())) {
    // video_embed_field prints every part of the URL separately and prints some
    // key characters in the twig directly (e.g. the '#' for the anchor).
    // This makes it difficult to properly encode the full URL to pass it to the
    // cck domain.
    // Also, the values of the query parameters that are of type
    // boolean, are converted wrongly because the Url class handles them
    // differently than the http_build_query method.
    //
    // @todo: Remove the workaround once this is fixed in core.
    // @see \Drupal\Component\Utility\UrlHelper::buildQuery
    // @see https://www.drupal.org/project/drupal/issues/2248257
    if (is_array($variables['query'])) {
      array_walk($variables['query'], function (&$value) {
        if (is_bool($value)) {
          $value = (int) $value;
        }
      });
    }

    $url = Url::fromUri($variables['url'], [
      'query' => $variables['query'],
      // Fragment is returned as an array, so give NULL to avoid type errors.
      'fragment' => empty($variables['fragment']) ? NULL : $variables['fragment'],
      'absolute' => TRUE,
    ]);
    $variables['url'] = OE_WEBTOOLS_COOKIE_CONSENT_EMBED_COOKIE_URL . urlencode($url->setAbsolute()->toString());
    unset($variables['query']);
    unset($variables['fragment']);
  }

}
